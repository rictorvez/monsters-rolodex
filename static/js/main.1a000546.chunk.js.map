{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","monzter","id","src","name","email","CardList","monsterz","map","monster","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","monsters","fetch","then","response","json","users","this","filteredMonsters","filter","toLowerCase","includes","trim","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6TAGaA,EAAO,SAACC,GAAD,OAChB,sBAAKC,UAAU,iBAAf,UACI,qBAAKC,IAAK,UAAYF,EAAMG,QAAQC,GAASC,IAAK,wBAA0BL,EAAMG,QAAQC,GAAK,2BAC/F,mCAAMJ,EAAMG,QAAQG,KAApB,OACA,4BAAIN,EAAMG,QAAQI,YCHbC,G,MAAW,SAACR,GAAD,OACpB,qBAAKC,UAAU,YAAf,SAEQD,EAAMS,SAASC,KAAI,SAAAC,GAAO,OAAK,cAAC,EAAD,CAAyBR,QAASQ,GAAtBA,EAAQP,WCJlDQ,G,MAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,aAAhB,OACrB,uBACIb,UAAU,SACVc,KAAK,SACLF,YAAaA,EACbG,SAAUF,MC6EHG,G,wDA9Eb,aAAe,IAAD,8BACZ,gBAcFH,aAAe,SAACI,GACd,EAAKC,SAAS,CAACC,YAAaF,EAAEG,OAAOC,SAbrC,EAAKC,MAAQ,CACXC,SAAU,GACVJ,YAAa,IALH,E,qDASd,WAAqB,IAAD,OAClBK,MAAM,8CACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKV,SAAS,CAACK,SAAUK,S,oBAO5C,WAAS,MAiB2BC,KAAKP,MAA/BH,EAjBD,EAiBCA,YACFW,EAlBC,EAiBcP,SACaQ,QAAO,SAAArB,GAAO,OAAIA,EAAQL,KAAK2B,cAAcC,SAASd,EAAYa,cAAcE,WAOlH,OACE,sBAAKlC,UAAU,MAAf,UAgBE,oDACA,cAAC,EAAD,CACEY,YAAY,kBACZC,aAAcgB,KAAKhB,eAQrB,cAAC,EAAD,CAAUL,SAAUsB,W,GA1EVK,cCOHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBb,MAAK,YAAkD,IAA/Cc,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.1a000546.chunk.js","sourcesContent":["import React from 'react';\r\nimport './card.styles.css';\r\n\r\nexport const Card = (props) => (\r\n    <div className='card-container'>\r\n        <img alt={'Monster' + props.monzter.id + ''} src={'https://robohash.org/' + props.monzter.id + '?set=set2&size=180x180'} />\r\n        <h2> {props.monzter.name} </h2>\r\n        <p>{props.monzter.email}</p>\r\n    </div>\r\n);\r\n","import React from 'react';\r\nimport { Card } from '../card/card.component';\r\nimport './card-list.styles.css'\r\n\r\nexport const CardList = (props) => (\r\n    <div className='card-list'>\r\n        {\r\n            props.monsterz.map(monster => (<Card key={ monster.id } monzter={monster} />))\r\n        }\r\n    </div>\r\n);\r\n","import React from 'react';\r\nimport './search-box.styles.css';\r\n\r\nexport const SearchBox = ({ placeholder, handleChange }) => (\r\n    <input \r\n        className='search'\r\n        type='search' \r\n        placeholder={placeholder} \r\n        onChange={handleChange} />\r\n);\r\n","import React, {Component} from 'react';\nimport { CardList } from './components/card-list/card-list.component';\nimport { SearchBox } from './components/search-box/search-box.component';\nimport './App.css';\n\nclass App extends Component {\n\n  constructor() {\n    super();\n\n    this.state = {\n      monsters: [],\n      searchField: ''\n    };\n  }\n\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users')\n      .then(response => response.json())\n      .then(users => this.setState({monsters: users}));\n  }\n\n  handleChange = (e) => {\n    this.setState({searchField: e.target.value});\n  }\n\n  render() {\n    /*\n      The two constants below in curly brackets, ie. monsters and searchField, MUST have the same spelling\n      as the names of the states, otherwise it will return an error\n\n      UPDATE: only if using it like so --> const { monsters, searchField } = this.state; <-- similar to shorthand notation I guess\n\n      Otherwise, can do it this way:\n\n      const monszters = this.state.monsters;\n      const szearchField = this.state.searchField;\n\n      Then reference that in the subsequent code like so:\n      const filteredMonsters = monszters.filter(monster => monster.name.toLowerCase().includes(szearchField.toLowerCase().trim()));\n\n    */\n\n    const { searchField, monsters } = this.state;\n    const filteredMonsters = monsters.filter(monster => monster.name.toLowerCase().includes(searchField.toLowerCase().trim()));\n\n    /*\n    console.log(\"searchField: \" + searchField);\n    console.log(filteredMonsters);\n    */\n\n    return (\n      <div className=\"App\">\n        {/*\n          To check if value of searchField in state is properly updated, can log value to console but have to\n          pass in a callback function in the second parameter of the onChange\n\n        <input type='search' placeholder='Search Monsters' onChange={e => this.setState({searchField: e.target.value}, \n            () => console.log(this.state))} />\n\n        -- before input was made into its own component...\n        <input type='search' placeholder='Search Monsters' onChange={e => this.setState({searchField: e.target.value})} />\n\n          <SearchBox\n            placeholder='Search Monsters'\n            handleChange={e => this.setState({searchField: e.target.value})}\n          />\n        */}\n        <h1> Monsters Rolodex </h1>\n        <SearchBox\n          placeholder='Search Monsters'\n          handleChange={this.handleChange}\n        />\n        \n        {/*\n          The original CardList...\n          <CardList monsterz={this.state.monsters} />\n        */}\n        \n        <CardList monsterz={filteredMonsters} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}